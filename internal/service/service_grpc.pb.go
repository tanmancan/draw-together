// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/service.proto

package service

import (
	context "context"
	model "github.com/tanmancan/draw-together/internal/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_CreateUser_FullMethodName = "/service.UserService/CreateUser"
	UserService_GetUser_FullMethodName    = "/service.UserService/GetUser"
	UserService_DeleteUser_FullMethodName = "/service.UserService/DeleteUser"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	CreateUser(ctx context.Context, in *model.CreateUserRequest, opts ...grpc.CallOption) (*model.CreateUserResponse, error)
	GetUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*model.GetUserResponse, error)
	DeleteUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*model.GetUserResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *model.CreateUserRequest, opts ...grpc.CallOption) (*model.CreateUserResponse, error) {
	out := new(model.CreateUserResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*model.GetUserResponse, error) {
	out := new(model.GetUserResponse)
	err := c.cc.Invoke(ctx, UserService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*model.GetUserResponse, error) {
	out := new(model.GetUserResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	CreateUser(context.Context, *model.CreateUserRequest) (*model.CreateUserResponse, error)
	GetUser(context.Context, *emptypb.Empty) (*model.GetUserResponse, error)
	DeleteUser(context.Context, *emptypb.Empty) (*model.GetUserResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) CreateUser(context.Context, *model.CreateUserRequest) (*model.CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *emptypb.Empty) (*model.GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *emptypb.Empty) (*model.GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*model.CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}

const (
	BoardService_CreateBoard_FullMethodName      = "/service.BoardService/CreateBoard"
	BoardService_GetBoard_FullMethodName         = "/service.BoardService/GetBoard"
	BoardService_DeleteBoard_FullMethodName      = "/service.BoardService/DeleteBoard"
	BoardService_UpdateDrawing_FullMethodName    = "/service.BoardService/UpdateDrawing"
	BoardService_GetBoardDrawings_FullMethodName = "/service.BoardService/GetBoardDrawings"
	BoardService_DrawingDetect_FullMethodName    = "/service.BoardService/DrawingDetect"
)

// BoardServiceClient is the client API for BoardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoardServiceClient interface {
	CreateBoard(ctx context.Context, in *model.CreateBoardRequest, opts ...grpc.CallOption) (*model.GetBoardResponse, error)
	GetBoard(ctx context.Context, in *model.GetBoardRequest, opts ...grpc.CallOption) (*model.GetBoardResponse, error)
	DeleteBoard(ctx context.Context, in *model.GetBoardRequest, opts ...grpc.CallOption) (*model.GetBoardResponse, error)
	UpdateDrawing(ctx context.Context, in *model.UpdateDrawingRequest, opts ...grpc.CallOption) (*model.UpdateDrawingResponse, error)
	GetBoardDrawings(ctx context.Context, in *model.GetBoardDrawingsRequest, opts ...grpc.CallOption) (*model.GetBoardDrawingsResponse, error)
	DrawingDetect(ctx context.Context, in *model.GetBoardDrawingsRequest, opts ...grpc.CallOption) (*model.DrawingDetectResponse, error)
}

type boardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBoardServiceClient(cc grpc.ClientConnInterface) BoardServiceClient {
	return &boardServiceClient{cc}
}

func (c *boardServiceClient) CreateBoard(ctx context.Context, in *model.CreateBoardRequest, opts ...grpc.CallOption) (*model.GetBoardResponse, error) {
	out := new(model.GetBoardResponse)
	err := c.cc.Invoke(ctx, BoardService_CreateBoard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) GetBoard(ctx context.Context, in *model.GetBoardRequest, opts ...grpc.CallOption) (*model.GetBoardResponse, error) {
	out := new(model.GetBoardResponse)
	err := c.cc.Invoke(ctx, BoardService_GetBoard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) DeleteBoard(ctx context.Context, in *model.GetBoardRequest, opts ...grpc.CallOption) (*model.GetBoardResponse, error) {
	out := new(model.GetBoardResponse)
	err := c.cc.Invoke(ctx, BoardService_DeleteBoard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) UpdateDrawing(ctx context.Context, in *model.UpdateDrawingRequest, opts ...grpc.CallOption) (*model.UpdateDrawingResponse, error) {
	out := new(model.UpdateDrawingResponse)
	err := c.cc.Invoke(ctx, BoardService_UpdateDrawing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) GetBoardDrawings(ctx context.Context, in *model.GetBoardDrawingsRequest, opts ...grpc.CallOption) (*model.GetBoardDrawingsResponse, error) {
	out := new(model.GetBoardDrawingsResponse)
	err := c.cc.Invoke(ctx, BoardService_GetBoardDrawings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) DrawingDetect(ctx context.Context, in *model.GetBoardDrawingsRequest, opts ...grpc.CallOption) (*model.DrawingDetectResponse, error) {
	out := new(model.DrawingDetectResponse)
	err := c.cc.Invoke(ctx, BoardService_DrawingDetect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoardServiceServer is the server API for BoardService service.
// All implementations must embed UnimplementedBoardServiceServer
// for forward compatibility
type BoardServiceServer interface {
	CreateBoard(context.Context, *model.CreateBoardRequest) (*model.GetBoardResponse, error)
	GetBoard(context.Context, *model.GetBoardRequest) (*model.GetBoardResponse, error)
	DeleteBoard(context.Context, *model.GetBoardRequest) (*model.GetBoardResponse, error)
	UpdateDrawing(context.Context, *model.UpdateDrawingRequest) (*model.UpdateDrawingResponse, error)
	GetBoardDrawings(context.Context, *model.GetBoardDrawingsRequest) (*model.GetBoardDrawingsResponse, error)
	DrawingDetect(context.Context, *model.GetBoardDrawingsRequest) (*model.DrawingDetectResponse, error)
	mustEmbedUnimplementedBoardServiceServer()
}

// UnimplementedBoardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBoardServiceServer struct {
}

func (UnimplementedBoardServiceServer) CreateBoard(context.Context, *model.CreateBoardRequest) (*model.GetBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBoard not implemented")
}
func (UnimplementedBoardServiceServer) GetBoard(context.Context, *model.GetBoardRequest) (*model.GetBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoard not implemented")
}
func (UnimplementedBoardServiceServer) DeleteBoard(context.Context, *model.GetBoardRequest) (*model.GetBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBoard not implemented")
}
func (UnimplementedBoardServiceServer) UpdateDrawing(context.Context, *model.UpdateDrawingRequest) (*model.UpdateDrawingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDrawing not implemented")
}
func (UnimplementedBoardServiceServer) GetBoardDrawings(context.Context, *model.GetBoardDrawingsRequest) (*model.GetBoardDrawingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoardDrawings not implemented")
}
func (UnimplementedBoardServiceServer) DrawingDetect(context.Context, *model.GetBoardDrawingsRequest) (*model.DrawingDetectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DrawingDetect not implemented")
}
func (UnimplementedBoardServiceServer) mustEmbedUnimplementedBoardServiceServer() {}

// UnsafeBoardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoardServiceServer will
// result in compilation errors.
type UnsafeBoardServiceServer interface {
	mustEmbedUnimplementedBoardServiceServer()
}

func RegisterBoardServiceServer(s grpc.ServiceRegistrar, srv BoardServiceServer) {
	s.RegisterService(&BoardService_ServiceDesc, srv)
}

func _BoardService_CreateBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CreateBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).CreateBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_CreateBoard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).CreateBoard(ctx, req.(*model.CreateBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_GetBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).GetBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_GetBoard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).GetBoard(ctx, req.(*model.GetBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_DeleteBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).DeleteBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_DeleteBoard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).DeleteBoard(ctx, req.(*model.GetBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_UpdateDrawing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.UpdateDrawingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).UpdateDrawing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_UpdateDrawing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).UpdateDrawing(ctx, req.(*model.UpdateDrawingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_GetBoardDrawings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetBoardDrawingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).GetBoardDrawings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_GetBoardDrawings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).GetBoardDrawings(ctx, req.(*model.GetBoardDrawingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_DrawingDetect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetBoardDrawingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).DrawingDetect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_DrawingDetect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).DrawingDetect(ctx, req.(*model.GetBoardDrawingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BoardService_ServiceDesc is the grpc.ServiceDesc for BoardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.BoardService",
	HandlerType: (*BoardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBoard",
			Handler:    _BoardService_CreateBoard_Handler,
		},
		{
			MethodName: "GetBoard",
			Handler:    _BoardService_GetBoard_Handler,
		},
		{
			MethodName: "DeleteBoard",
			Handler:    _BoardService_DeleteBoard_Handler,
		},
		{
			MethodName: "UpdateDrawing",
			Handler:    _BoardService_UpdateDrawing_Handler,
		},
		{
			MethodName: "GetBoardDrawings",
			Handler:    _BoardService_GetBoardDrawings_Handler,
		},
		{
			MethodName: "DrawingDetect",
			Handler:    _BoardService_DrawingDetect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}

const (
	ChatService_SendMessage_FullMethodName      = "/service.ChatService/SendMessage"
	ChatService_GetBoardMessages_FullMethodName = "/service.ChatService/GetBoardMessages"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	SendMessage(ctx context.Context, in *model.ChatMessageRequest, opts ...grpc.CallOption) (*model.ChatMessageResponse, error)
	GetBoardMessages(ctx context.Context, in *model.GetBoardMessagesRequest, opts ...grpc.CallOption) (*model.GetBoardMessagesResponse, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) SendMessage(ctx context.Context, in *model.ChatMessageRequest, opts ...grpc.CallOption) (*model.ChatMessageResponse, error) {
	out := new(model.ChatMessageResponse)
	err := c.cc.Invoke(ctx, ChatService_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetBoardMessages(ctx context.Context, in *model.GetBoardMessagesRequest, opts ...grpc.CallOption) (*model.GetBoardMessagesResponse, error) {
	out := new(model.GetBoardMessagesResponse)
	err := c.cc.Invoke(ctx, ChatService_GetBoardMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	SendMessage(context.Context, *model.ChatMessageRequest) (*model.ChatMessageResponse, error)
	GetBoardMessages(context.Context, *model.GetBoardMessagesRequest) (*model.GetBoardMessagesResponse, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) SendMessage(context.Context, *model.ChatMessageRequest) (*model.ChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatServiceServer) GetBoardMessages(context.Context, *model.GetBoardMessagesRequest) (*model.GetBoardMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoardMessages not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.ChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendMessage(ctx, req.(*model.ChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetBoardMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetBoardMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetBoardMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetBoardMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetBoardMessages(ctx, req.(*model.GetBoardMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _ChatService_SendMessage_Handler,
		},
		{
			MethodName: "GetBoardMessages",
			Handler:    _ChatService_GetBoardMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}

const (
	PointerService_UpdatePointer_FullMethodName = "/service.PointerService/UpdatePointer"
)

// PointerServiceClient is the client API for PointerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PointerServiceClient interface {
	UpdatePointer(ctx context.Context, in *model.UpdatePointerRequest, opts ...grpc.CallOption) (*model.UpdatePointerResponse, error)
}

type pointerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPointerServiceClient(cc grpc.ClientConnInterface) PointerServiceClient {
	return &pointerServiceClient{cc}
}

func (c *pointerServiceClient) UpdatePointer(ctx context.Context, in *model.UpdatePointerRequest, opts ...grpc.CallOption) (*model.UpdatePointerResponse, error) {
	out := new(model.UpdatePointerResponse)
	err := c.cc.Invoke(ctx, PointerService_UpdatePointer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PointerServiceServer is the server API for PointerService service.
// All implementations must embed UnimplementedPointerServiceServer
// for forward compatibility
type PointerServiceServer interface {
	UpdatePointer(context.Context, *model.UpdatePointerRequest) (*model.UpdatePointerResponse, error)
	mustEmbedUnimplementedPointerServiceServer()
}

// UnimplementedPointerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPointerServiceServer struct {
}

func (UnimplementedPointerServiceServer) UpdatePointer(context.Context, *model.UpdatePointerRequest) (*model.UpdatePointerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePointer not implemented")
}
func (UnimplementedPointerServiceServer) mustEmbedUnimplementedPointerServiceServer() {}

// UnsafePointerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PointerServiceServer will
// result in compilation errors.
type UnsafePointerServiceServer interface {
	mustEmbedUnimplementedPointerServiceServer()
}

func RegisterPointerServiceServer(s grpc.ServiceRegistrar, srv PointerServiceServer) {
	s.RegisterService(&PointerService_ServiceDesc, srv)
}

func _PointerService_UpdatePointer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.UpdatePointerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointerServiceServer).UpdatePointer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PointerService_UpdatePointer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointerServiceServer).UpdatePointer(ctx, req.(*model.UpdatePointerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PointerService_ServiceDesc is the grpc.ServiceDesc for PointerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PointerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.PointerService",
	HandlerType: (*PointerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePointer",
			Handler:    _PointerService_UpdatePointer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
