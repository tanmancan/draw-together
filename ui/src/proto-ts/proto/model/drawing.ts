// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck
// @generated from protobuf file "proto/model/drawing.proto" (package "model", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UUID } from "./common";
import { EventMetadata } from "./common";
/**
 * @generated from protobuf message model.ImageData
 */
export interface ImageData {
    /**
     * @generated from protobuf field: bytes data = 4;
     */
    data: Uint8Array;
}
/**
 * @generated from protobuf message model.EventDrawingUpdate
 */
export interface EventDrawingUpdate {
    /**
     * @generated from protobuf field: model.EventMetadata metadata = 1;
     */
    metadata?: EventMetadata;
    /**
     * @generated from protobuf field: model.ImageData image_data = 2;
     */
    imageData?: ImageData;
}
/**
 * @generated from protobuf message model.EventDrawingDetectQueue
 */
export interface EventDrawingDetectQueue {
    /**
     * @generated from protobuf field: model.EventMetadata metadata = 1;
     */
    metadata?: EventMetadata;
    /**
     * @generated from protobuf field: model.UUID board_id = 2;
     */
    boardId?: UUID;
}
/**
 * @generated from protobuf message model.EventDrawingDetect
 */
export interface EventDrawingDetect {
    /**
     * @generated from protobuf field: model.EventMetadata metadata = 1;
     */
    metadata?: EventMetadata;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string;
}
/**
 * @generated from protobuf message model.UpdateDrawingRequest
 */
export interface UpdateDrawingRequest {
    /**
     * @generated from protobuf field: model.UUID board_id = 1;
     */
    boardId?: UUID;
    /**
     * @generated from protobuf field: model.ImageData image_data = 3;
     */
    imageData?: ImageData;
}
/**
 * @generated from protobuf message model.UpdateDrawingResponse
 */
export interface UpdateDrawingResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * @generated from protobuf message model.GetBoardDrawingsRequest
 */
export interface GetBoardDrawingsRequest {
    /**
     * @generated from protobuf field: model.UUID board_id = 1;
     */
    boardId?: UUID;
}
/**
 * @generated from protobuf message model.GetBoardDrawingsResponse
 */
export interface GetBoardDrawingsResponse {
    /**
     * map<userUUID, ImageData>
     *
     * @generated from protobuf field: map<string, model.ImageData> drawings = 1;
     */
    drawings: {
        [key: string]: ImageData;
    };
}
/**
 * @generated from protobuf message model.DrawingDetectResponse
 */
export interface DrawingDetectResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class ImageData$Type extends MessageType<ImageData> {
    constructor() {
        super("model.ImageData", [
            { no: 4, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ImageData>): ImageData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<ImageData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImageData): ImageData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 4:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImageData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes data = 4; */
        if (message.data.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message model.ImageData
 */
export const ImageData = new ImageData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventDrawingUpdate$Type extends MessageType<EventDrawingUpdate> {
    constructor() {
        super("model.EventDrawingUpdate", [
            { no: 1, name: "metadata", kind: "message", T: () => EventMetadata },
            { no: 2, name: "image_data", kind: "message", T: () => ImageData }
        ]);
    }
    create(value?: PartialMessage<EventDrawingUpdate>): EventDrawingUpdate {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EventDrawingUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventDrawingUpdate): EventDrawingUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* model.EventMetadata metadata */ 1:
                    message.metadata = EventMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* model.ImageData image_data */ 2:
                    message.imageData = ImageData.internalBinaryRead(reader, reader.uint32(), options, message.imageData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventDrawingUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* model.EventMetadata metadata = 1; */
        if (message.metadata)
            EventMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* model.ImageData image_data = 2; */
        if (message.imageData)
            ImageData.internalBinaryWrite(message.imageData, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message model.EventDrawingUpdate
 */
export const EventDrawingUpdate = new EventDrawingUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventDrawingDetectQueue$Type extends MessageType<EventDrawingDetectQueue> {
    constructor() {
        super("model.EventDrawingDetectQueue", [
            { no: 1, name: "metadata", kind: "message", T: () => EventMetadata },
            { no: 2, name: "board_id", kind: "message", T: () => UUID }
        ]);
    }
    create(value?: PartialMessage<EventDrawingDetectQueue>): EventDrawingDetectQueue {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EventDrawingDetectQueue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventDrawingDetectQueue): EventDrawingDetectQueue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* model.EventMetadata metadata */ 1:
                    message.metadata = EventMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* model.UUID board_id */ 2:
                    message.boardId = UUID.internalBinaryRead(reader, reader.uint32(), options, message.boardId);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventDrawingDetectQueue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* model.EventMetadata metadata = 1; */
        if (message.metadata)
            EventMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* model.UUID board_id = 2; */
        if (message.boardId)
            UUID.internalBinaryWrite(message.boardId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message model.EventDrawingDetectQueue
 */
export const EventDrawingDetectQueue = new EventDrawingDetectQueue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventDrawingDetect$Type extends MessageType<EventDrawingDetect> {
    constructor() {
        super("model.EventDrawingDetect", [
            { no: 1, name: "metadata", kind: "message", T: () => EventMetadata },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EventDrawingDetect>): EventDrawingDetect {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<EventDrawingDetect>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventDrawingDetect): EventDrawingDetect {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* model.EventMetadata metadata */ 1:
                    message.metadata = EventMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventDrawingDetect, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* model.EventMetadata metadata = 1; */
        if (message.metadata)
            EventMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message model.EventDrawingDetect
 */
export const EventDrawingDetect = new EventDrawingDetect$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDrawingRequest$Type extends MessageType<UpdateDrawingRequest> {
    constructor() {
        super("model.UpdateDrawingRequest", [
            { no: 1, name: "board_id", kind: "message", T: () => UUID },
            { no: 3, name: "image_data", kind: "message", T: () => ImageData }
        ]);
    }
    create(value?: PartialMessage<UpdateDrawingRequest>): UpdateDrawingRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateDrawingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDrawingRequest): UpdateDrawingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* model.UUID board_id */ 1:
                    message.boardId = UUID.internalBinaryRead(reader, reader.uint32(), options, message.boardId);
                    break;
                case /* model.ImageData image_data */ 3:
                    message.imageData = ImageData.internalBinaryRead(reader, reader.uint32(), options, message.imageData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDrawingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* model.UUID board_id = 1; */
        if (message.boardId)
            UUID.internalBinaryWrite(message.boardId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* model.ImageData image_data = 3; */
        if (message.imageData)
            ImageData.internalBinaryWrite(message.imageData, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message model.UpdateDrawingRequest
 */
export const UpdateDrawingRequest = new UpdateDrawingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDrawingResponse$Type extends MessageType<UpdateDrawingResponse> {
    constructor() {
        super("model.UpdateDrawingResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateDrawingResponse>): UpdateDrawingResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<UpdateDrawingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDrawingResponse): UpdateDrawingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDrawingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message model.UpdateDrawingResponse
 */
export const UpdateDrawingResponse = new UpdateDrawingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBoardDrawingsRequest$Type extends MessageType<GetBoardDrawingsRequest> {
    constructor() {
        super("model.GetBoardDrawingsRequest", [
            { no: 1, name: "board_id", kind: "message", T: () => UUID }
        ]);
    }
    create(value?: PartialMessage<GetBoardDrawingsRequest>): GetBoardDrawingsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetBoardDrawingsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBoardDrawingsRequest): GetBoardDrawingsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* model.UUID board_id */ 1:
                    message.boardId = UUID.internalBinaryRead(reader, reader.uint32(), options, message.boardId);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBoardDrawingsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* model.UUID board_id = 1; */
        if (message.boardId)
            UUID.internalBinaryWrite(message.boardId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message model.GetBoardDrawingsRequest
 */
export const GetBoardDrawingsRequest = new GetBoardDrawingsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBoardDrawingsResponse$Type extends MessageType<GetBoardDrawingsResponse> {
    constructor() {
        super("model.GetBoardDrawingsResponse", [
            { no: 1, name: "drawings", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => ImageData } }
        ]);
    }
    create(value?: PartialMessage<GetBoardDrawingsResponse>): GetBoardDrawingsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.drawings = {};
        if (value !== undefined)
            reflectionMergePartial<GetBoardDrawingsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBoardDrawingsResponse): GetBoardDrawingsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, model.ImageData> drawings */ 1:
                    this.binaryReadMap1(message.drawings, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: GetBoardDrawingsResponse["drawings"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GetBoardDrawingsResponse["drawings"] | undefined, val: GetBoardDrawingsResponse["drawings"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = ImageData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field model.GetBoardDrawingsResponse.drawings");
            }
        }
        map[key ?? ""] = val ?? ImageData.create();
    }
    internalBinaryWrite(message: GetBoardDrawingsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, model.ImageData> drawings = 1; */
        for (let k of globalThis.Object.keys(message.drawings)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            ImageData.internalBinaryWrite(message.drawings[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message model.GetBoardDrawingsResponse
 */
export const GetBoardDrawingsResponse = new GetBoardDrawingsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DrawingDetectResponse$Type extends MessageType<DrawingDetectResponse> {
    constructor() {
        super("model.DrawingDetectResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DrawingDetectResponse>): DrawingDetectResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<DrawingDetectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DrawingDetectResponse): DrawingDetectResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DrawingDetectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message model.DrawingDetectResponse
 */
export const DrawingDetectResponse = new DrawingDetectResponse$Type();
