// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck
// @generated from protobuf file "proto/model/pointer.proto" (package "model", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UUID } from "./common";
import { EventMetadata } from "./common";
/**
 * @generated from protobuf message model.PointerPosition
 */
export interface PointerPosition {
    /**
     * @generated from protobuf field: uint32 x = 1;
     */
    x: number;
    /**
     * @generated from protobuf field: uint32 y = 2;
     */
    y: number;
}
/**
 * @generated from protobuf message model.EventPointerUpdate
 */
export interface EventPointerUpdate {
    /**
     * @generated from protobuf field: model.EventMetadata metadata = 1;
     */
    metadata?: EventMetadata;
    /**
     * @generated from protobuf field: repeated model.PointerPosition pointer_positions = 5;
     */
    pointerPositions: PointerPosition[];
}
/**
 * Send pointer movements to the server
 *
 * @generated from protobuf message model.UpdatePointerRequest
 */
export interface UpdatePointerRequest {
    /**
     * @generated from protobuf field: model.UUID board_id = 1;
     */
    boardId?: UUID;
    /**
     * @generated from protobuf field: repeated model.PointerPosition pointer_positions = 2;
     */
    pointerPositions: PointerPosition[];
}
/**
 * @generated from protobuf message model.UpdatePointerResponse
 */
export interface UpdatePointerResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class PointerPosition$Type extends MessageType<PointerPosition> {
    constructor() {
        super("model.PointerPosition", [
            { no: 1, name: "x", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "y", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PointerPosition>): PointerPosition {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.x = 0;
        message.y = 0;
        if (value !== undefined)
            reflectionMergePartial<PointerPosition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PointerPosition): PointerPosition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 x */ 1:
                    message.x = reader.uint32();
                    break;
                case /* uint32 y */ 2:
                    message.y = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PointerPosition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 x = 1; */
        if (message.x !== 0)
            writer.tag(1, WireType.Varint).uint32(message.x);
        /* uint32 y = 2; */
        if (message.y !== 0)
            writer.tag(2, WireType.Varint).uint32(message.y);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message model.PointerPosition
 */
export const PointerPosition = new PointerPosition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventPointerUpdate$Type extends MessageType<EventPointerUpdate> {
    constructor() {
        super("model.EventPointerUpdate", [
            { no: 1, name: "metadata", kind: "message", T: () => EventMetadata },
            { no: 5, name: "pointer_positions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PointerPosition }
        ]);
    }
    create(value?: PartialMessage<EventPointerUpdate>): EventPointerUpdate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pointerPositions = [];
        if (value !== undefined)
            reflectionMergePartial<EventPointerUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventPointerUpdate): EventPointerUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* model.EventMetadata metadata */ 1:
                    message.metadata = EventMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* repeated model.PointerPosition pointer_positions */ 5:
                    message.pointerPositions.push(PointerPosition.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventPointerUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* model.EventMetadata metadata = 1; */
        if (message.metadata)
            EventMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated model.PointerPosition pointer_positions = 5; */
        for (let i = 0; i < message.pointerPositions.length; i++)
            PointerPosition.internalBinaryWrite(message.pointerPositions[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message model.EventPointerUpdate
 */
export const EventPointerUpdate = new EventPointerUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePointerRequest$Type extends MessageType<UpdatePointerRequest> {
    constructor() {
        super("model.UpdatePointerRequest", [
            { no: 1, name: "board_id", kind: "message", T: () => UUID },
            { no: 2, name: "pointer_positions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PointerPosition }
        ]);
    }
    create(value?: PartialMessage<UpdatePointerRequest>): UpdatePointerRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pointerPositions = [];
        if (value !== undefined)
            reflectionMergePartial<UpdatePointerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePointerRequest): UpdatePointerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* model.UUID board_id */ 1:
                    message.boardId = UUID.internalBinaryRead(reader, reader.uint32(), options, message.boardId);
                    break;
                case /* repeated model.PointerPosition pointer_positions */ 2:
                    message.pointerPositions.push(PointerPosition.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatePointerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* model.UUID board_id = 1; */
        if (message.boardId)
            UUID.internalBinaryWrite(message.boardId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated model.PointerPosition pointer_positions = 2; */
        for (let i = 0; i < message.pointerPositions.length; i++)
            PointerPosition.internalBinaryWrite(message.pointerPositions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message model.UpdatePointerRequest
 */
export const UpdatePointerRequest = new UpdatePointerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePointerResponse$Type extends MessageType<UpdatePointerResponse> {
    constructor() {
        super("model.UpdatePointerResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatePointerResponse>): UpdatePointerResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<UpdatePointerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePointerResponse): UpdatePointerResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatePointerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message model.UpdatePointerResponse
 */
export const UpdatePointerResponse = new UpdatePointerResponse$Type();
