// @generated by protobuf-ts 2.9.4 with parameter ts_nocheck
// @generated from protobuf file "proto/model/chat.proto" (package "model", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UUID } from "./common";
import { EventMetadata } from "./common";
/**
 * A single message event
 *
 * @generated from protobuf message model.EventChatMessage
 */
export interface EventChatMessage {
    /**
     * @generated from protobuf field: model.EventMetadata metadata = 1;
     */
    metadata?: EventMetadata;
    /**
     * @generated from protobuf field: string body = 2;
     */
    body: string;
}
/**
 * @generated from protobuf message model.ChatMessageRequest
 */
export interface ChatMessageRequest {
    /**
     * @generated from protobuf field: model.UUID board_id = 1;
     */
    boardId?: UUID;
    /**
     * List of one or more batched messages
     *
     * @generated from protobuf field: repeated string message = 2;
     */
    message: string[];
}
/**
 * @generated from protobuf message model.ChatMessageResponse
 */
export interface ChatMessageResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * Get all board messages
 *
 * @generated from protobuf message model.GetBoardMessagesRequest
 */
export interface GetBoardMessagesRequest {
    /**
     * @generated from protobuf field: model.UUID board_id = 1;
     */
    boardId?: UUID;
}
/**
 * @generated from protobuf message model.GetBoardMessagesResponse
 */
export interface GetBoardMessagesResponse {
    /**
     * @generated from protobuf field: repeated model.EventChatMessage messages = 1;
     */
    messages: EventChatMessage[];
}
// @generated message type with reflection information, may provide speed optimized methods
class EventChatMessage$Type extends MessageType<EventChatMessage> {
    constructor() {
        super("model.EventChatMessage", [
            { no: 1, name: "metadata", kind: "message", T: () => EventMetadata },
            { no: 2, name: "body", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EventChatMessage>): EventChatMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.body = "";
        if (value !== undefined)
            reflectionMergePartial<EventChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventChatMessage): EventChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* model.EventMetadata metadata */ 1:
                    message.metadata = EventMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* string body */ 2:
                    message.body = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* model.EventMetadata metadata = 1; */
        if (message.metadata)
            EventMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string body = 2; */
        if (message.body !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.body);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message model.EventChatMessage
 */
export const EventChatMessage = new EventChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatMessageRequest$Type extends MessageType<ChatMessageRequest> {
    constructor() {
        super("model.ChatMessageRequest", [
            { no: 1, name: "board_id", kind: "message", T: () => UUID },
            { no: 2, name: "message", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatMessageRequest>): ChatMessageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = [];
        if (value !== undefined)
            reflectionMergePartial<ChatMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatMessageRequest): ChatMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* model.UUID board_id */ 1:
                    message.boardId = UUID.internalBinaryRead(reader, reader.uint32(), options, message.boardId);
                    break;
                case /* repeated string message */ 2:
                    message.message.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* model.UUID board_id = 1; */
        if (message.boardId)
            UUID.internalBinaryWrite(message.boardId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated string message = 2; */
        for (let i = 0; i < message.message.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.message[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message model.ChatMessageRequest
 */
export const ChatMessageRequest = new ChatMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatMessageResponse$Type extends MessageType<ChatMessageResponse> {
    constructor() {
        super("model.ChatMessageResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ChatMessageResponse>): ChatMessageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<ChatMessageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatMessageResponse): ChatMessageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatMessageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message model.ChatMessageResponse
 */
export const ChatMessageResponse = new ChatMessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBoardMessagesRequest$Type extends MessageType<GetBoardMessagesRequest> {
    constructor() {
        super("model.GetBoardMessagesRequest", [
            { no: 1, name: "board_id", kind: "message", T: () => UUID }
        ]);
    }
    create(value?: PartialMessage<GetBoardMessagesRequest>): GetBoardMessagesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetBoardMessagesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBoardMessagesRequest): GetBoardMessagesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* model.UUID board_id */ 1:
                    message.boardId = UUID.internalBinaryRead(reader, reader.uint32(), options, message.boardId);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBoardMessagesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* model.UUID board_id = 1; */
        if (message.boardId)
            UUID.internalBinaryWrite(message.boardId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message model.GetBoardMessagesRequest
 */
export const GetBoardMessagesRequest = new GetBoardMessagesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBoardMessagesResponse$Type extends MessageType<GetBoardMessagesResponse> {
    constructor() {
        super("model.GetBoardMessagesResponse", [
            { no: 1, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => EventChatMessage }
        ]);
    }
    create(value?: PartialMessage<GetBoardMessagesResponse>): GetBoardMessagesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messages = [];
        if (value !== undefined)
            reflectionMergePartial<GetBoardMessagesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBoardMessagesResponse): GetBoardMessagesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated model.EventChatMessage messages */ 1:
                    message.messages.push(EventChatMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBoardMessagesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated model.EventChatMessage messages = 1; */
        for (let i = 0; i < message.messages.length; i++)
            EventChatMessage.internalBinaryWrite(message.messages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message model.GetBoardMessagesResponse
 */
export const GetBoardMessagesResponse = new GetBoardMessagesResponse$Type();
